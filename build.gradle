plugins {
    id 'org.springframework.boot' version '2.6.11'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id "org.sonarqube" version "3.4.0.2513"
    id 'jacoco'
}

group = 'com.cmsujeevan'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    compile.exclude module: "spring-boot-starter-logging"
    compile.exclude module: "log4j-to-slf4j"
    compile.exclude module: "logback-classic"
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'com.vaadin.external.google', module: 'android-json'
        exclude module: 'slf4j-log4j12'
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.3")
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.projectlombok:lombok:1.18.24'
//    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.postgresql:postgresql'

    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-aws-secrets-manager-config
    // implementation 'org.springframework.cloud:spring-cloud-starter-aws-secrets-manager-config:2.2.6.RELEASE'

    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
    implementation 'com.amazonaws:aws-java-sdk-s3'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.11.0'

    // https://mvnrepository.com/artifact/org.json/json
    implementation 'org.json:json:20230618'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'io.swagger:swagger-annotations:1.6.6'
    implementation 'io.swagger:swagger-models:1.6.6'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.9.1'

    implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.2'
    implementation 'com.lmax:disruptor:3.4.4'

    // https://mvnrepository.com/artifact/com.vladmihalcea/hibernate-types-52
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.21.1'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-csv
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.15.1'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.15.1'

    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'
    testImplementation 'com.google.code.gson:gson:2.9.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation group: 'io.findify', name: 's3mock_2.12', version: '0.2.5'
    testImplementation 'com.h2database:h2:2.1.214'

    testImplementation 'org.mockito:mockito-inline:4.8.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


project.ext {
	sonarExcludeFile = [
            "**/model/**",
            "**/dao/**"
	]
}

sourceSets {
    main {
        java {
            srcDirs "src/main/java"
        }
        resources {
            srcDirs "src/main/resources"
        }
    }
    test {
        java {
            srcDirs "src/test-unit/java"
            srcDirs "src/test-integration/java"
            srcDirs "src/test-functional/java"
        }
        resources {
            srcDirs "src/test-unit/resources"
            srcDirs "src/test-integration/resources"
            srcDirs "src/test-functional/resources"
        }
    }
}


test {
    finalizedBy "jacocoTestReport"
}

jacocoTestReport {
    dependsOn "test"
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: sonarExcludeFile)
        }))
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "project-cdp-partner-integration-bulk-api"
        property "sonar.projectName", "project-cdp-partner-integration-bulk-api"
        property "sonar.host.url", "url"
		property "sonar.login", "cred"
        property "sonar.java.source", 17
        property "sonar.verbose", "true"
        property "sonar.exclusions", sonarExcludeFile
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

project.tasks["sonarqube"].dependsOn "compileJava"
project.tasks["sonarqube"].dependsOn "jacocoTestReport"

project.tasks.named("processResources") {
    duplicatesStrategy = 'include'
}

build {
    finalizedBy 'sonarqube'
}